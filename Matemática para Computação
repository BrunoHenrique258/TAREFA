// Veiculo.ts

export class Veiculo {
    private latitude: number;
    private longitude: number;

    constructor(latitude: number, longitude: number) {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public obterCoordenadas(): { latitude: number; longitude: number } {
        return { latitude: this.latitude, longitude: this.longitude };
    }

    public mover(novaLatitude: number, novaLongitude: number): void {
        this.latitude = novaLatitude;
        this.longitude = novaLongitude;
    }
}

export class VeiculoEletrico extends Veiculo {
    protected bateria: number; // Capacidade da bateria em porcentagem

    constructor(latitude: number, longitude: number, bateria: number) {
        super(latitude, longitude);
        this.bateria = bateria;
    }

    public obterBateria(): number {
        return this.bateria;
    }

    public recarregar(novaBateria: number): void {
        this.bateria = Math.min(novaBateria, 100); // A bateria não pode passar de 100%
    }

    public mover(novaLatitude: number, novaLongitude: number): void {
        if (this.bateria > 0) {
            super.mover(novaLatitude, novaLongitude);
            this.bateria -= 10; // Consome 10% da bateria ao mover
            console.log(`Movendo para: Latitude ${novaLatitude}, Longitude ${novaLongitude}`);
        } else {
            console.log("Bateria insuficiente para mover.");
        }
    }
}

export class VeiculoEletricoVoador extends VeiculoEletrico {
    private altitude: number; // Altitude em metros

    constructor(latitude: number, longitude: number, bateria: number, altitude: number = 0) {
        super(latitude, longitude, bateria);
        this.altitude = altitude;
    }

    public obterAltitude(): number {
        return this.altitude;
    }

    public subir(incremento: number): void {
        this.altitude += incremento;
        console.log(`Subindo para a altitude: ${this.altitude} metros.`);
    }

    public descer(decremento: number): void {
        if (this.altitude - decremento >= 0) {
            this.altitude -= decremento;
            console.log(`Descendo para a altitude: ${this.altitude} metros.`);
        } else {
            console.log("Não é possível descer abaixo da altitude 0 metros.");
        }
    }

    public mover(novaLatitude: number, novaLongitude: number): void {
        console.log(`Tentando mover para: Latitude ${novaLatitude}, Longitude ${novaLongitude}.`);
        if (this.bateria > 0) {
            super.mover(novaLatitude, novaLongitude);
            this.bateria -= 15; // Consome 15% da bateria ao mover no ar
            console.log(`Movido! Nova posição: Latitude ${novaLatitude}, Longitude ${novaLongitude}, Altitude ${this.altitude} metros.`);
        } else {
            console.log("Bateria insuficiente para mover.");
        }
    }
}


// App.ts

import { VeiculoEletricoVoador } from './Veiculo';

function main() {
    // Criação de um novo veículo elétrico voador
    const veiculoVoador = new VeiculoEletricoVoador(40.7128, -74.0060, 100); // Nova Iorque com bateria cheia

    // Acessando as coordenadas e altitude
    console.log(`Coordenadas iniciais: ${JSON.stringify(veiculoVoador.obterCoordenadas())}`);
    console.log(`Bateria: ${veiculoVoador.obterBateria()}%`);
    console.log(`Altitude: ${veiculoVoador.obterAltitude()} metros`);

    // Movendo o veículo elétrico voador
    veiculoVoador.subir(100); // Subindo para 100 metros
    veiculoVoador.mover(34.0522, -118.2437); // Nova localização
    console.log(`Movido! Bateria restante: ${veiculoVoador.obterBateria()}%`);

      // Descendo o veículo até 0 metros
      veiculoVoador.descer(veiculoVoador.obterAltitude()); // Descendo para 0 metros
      console.log(`Altitude atual: ${veiculoVoador.obterAltitude()} metros`);
  }

main();
