DROP TABLE cliente;

CREATE TABLE  cliente(
	Codigo_Cliente INTEGER PRIMARY KEY,
	Nome VARCHAR NOT NULL,
	Cidade VARCHAR,
	Endereço VARCHAR,
	CONSTRAINT Codigo_Cliente REFERENCES emprestimo
);

CREATE TABLE titulo(
	Codigo_Titulo INTEGER PRIMARY KEY,
	Titulo VARCHAR NOT NULL,
	Descricao VARCHAR,
	Categorias VARCHAR
);

CREATE TABLE emprestimo(
	Numero_Emprestimo INTEGER PRIMARY KEY,
	Codigo_Cliente INTEGER,
	Codigo_Livro INTEGER
);

CREATE TABLE livro(
	Codigo_livro INTEGER PRIMARY KEY,
	Titulo_Livro INTEGER
);

AULA 12

-- exercicios


--1 Crie uma funcao denominada fc_soma que recebe dois valores inteiros e retorna o valor resultante da soma de ambos

CREATE OR REPLACE FUNCTION fc_soma(val1 INT, val2 INT)
RETURNS INT AS $$
BEGIN
    RETURN val1 + val2;
END;
$$ LANGUAGE plpgsql;

--2 Crie uma funcao denominada fc_maior_salario, que sem usar função agregada MAX, retorne o nome do empregado com o maior salario.

CREATE OR REPLACE FUNCTION fc_maior_salario()
RETURNS TEXT AS $$
DECLARE
    empregado_nome TEXT;
    maior_salario REAL := 0;
BEGIN
    
    FOR empregado IN
        SELECT nome, salario FROM tbl_empregados
    LOOP
        -- Se o salário atual for maior que o maior salário encontrado até agora
        IF empregado.salario > maior_salario THEN
            maior_salario := empregado.salario;
            empregado_nome := empregado.nome;
        END IF;
    END LOOP;

    RETURN empregado_nome;
END;
$$ LANGUAGE plpgsql;

--3 crie a funcao fc_media_salario que retorna a media dos salarios dos empregados

CREATE OR REPLACE FUNCTION fc_media_salario()
RETURNS REAL AS $$
DECLARE
    total_salarios REAL := 0;
    num_empregados INT := 0;
BEGIN
   
    FOR empregado IN
        SELECT salario FROM tbl_empregados
    LOOP
        total_salarios := total_salarios + empregado.salario;
        num_empregados := num_empregados + 1;
    END LOOP;

    IF num_empregados > 0 THEN
        RETURN total_salarios / num_empregados;
    ELSE
        RETURN 0;  
    END IF;
END;
$$ LANGUAGE plpgsql;

--4 Crie a funcao fc_salarios que recebe o código do empregado como parâmetro e retorne o salário, o salário acrescido de 10% e o salário reduzido em 15%.

CREATE OR REPLACE FUNCTION fc_salarios(cod_empregado INT)
RETURNS TABLE(salario REAL, salario_acrescimo REAL, salario_reducao REAL) AS $$
BEGIN
    
    SELECT 
        salario, 
        salario * 1.10 AS salario_acrescimo,  -- Salário acrescido de 10%
        salario * 0.85 AS salario_reducao    -- Salário reduzido em 15%
    INTO salario, salario_acrescimo, salario_reducao
    FROM tbl_empregados
    WHERE cod_empregado = cod_empregado;
    
    RETURN NEXT;
END;
$$ LANGUAGE plpgsql;

--5 Crie uma funcao denominada fc_projetos que liste o código e o nome de todos os projetos cadastrados.

CREATE OR REPLACE FUNCTION fc_projetos()
RETURNS TABLE(cod_projeto INT, nome_projeto TEXT) AS $$
BEGIN

    RETURN QUERY
    SELECT cod_projeto, nome
    FROM tbl_projetos;
END;
$$ LANGUAGE plpgsql;

--6 Crie a funcao fc_proj_departmento que recebe o codigo do departamento e mostra quantos projetos o departamento possui

CREATE OR REPLACE FUNCTION fc_proj_departmento(cod_departamento INT)
RETURNS INT AS $$
DECLARE
    num_projetos INT;
BEGIN
    
    SELECT COUNT(*)
    INTO num_projetos
    FROM tbl_projetos
    WHERE cod_departamento = cod_departamento;

    
    RETURN num_projetos;
END;
$$ LANGUAGE plpgsql;


AULA 14

-- exercicios


--1 crie uma trigger que atualiza a quantidade de projetos da tbl_departamentos caso um projeto for deletado


CREATE OR REPLACE FUNCTION atualizar_qtde_projetos() 
RETURNS TRIGGER AS $$
BEGIN
 
    UPDATE tbl_departamentos
    SET qtde_projetos = qtde_projetos - 1
    WHERE cod_departamento = OLD.cod_departamento;
    
 
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_atualizar_qtde_projetos
AFTER DELETE ON tbl_projetos
FOR EACH ROW
EXECUTE FUNCTION atualizar_qtde_projetos();


--2 crie uma trigger que atualiza a quantidade de projetos da tbl_departamentos caso um novo projeto for adicionado


CREATE OR REPLACE FUNCTION atualizar_qtde_projetos_adicao() 
RETURNS TRIGGER AS $$
BEGIN

    UPDATE tbl_departamentos
    SET qtde_projetos = qtde_projetos + 1
    WHERE cod_departamento = NEW.cod_departamento;
    
  
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_atualizar_qtde_projetos_adicao
AFTER INSERT ON tbl_projetos
FOR EACH ROW
EXECUTE FUNCTION atualizar_qtde_projetos_adicao();


--3 a) Crie uma tabela chamada tbl_empregado_historico_salario com as colunas cod_empregado e salario e data
--  b) crie uma trigger que salva o salario atual de um empregado toda vez que seu salario for atualizado
-- dica: use a funcao now() para salvar a data

drop table tbl_empregado_historico_salario 

CREATE TABLE tbl_empregado_historico_salario (
    cod_empregado INT NOT NULL,
    salario REAL NOT NULL,
    data TIMESTAMP NOT NULL DEFAULT now(),
    PRIMARY KEY (cod_empregado, data),
    FOREIGN KEY (cod_empregado) REFERENCES tbl_empregados(cod_empregado)
);


CREATE OR REPLACE FUNCTION salvar_historico_salario() 
RETURNS TRIGGER AS $$
BEGIN
    
    INSERT INTO tbl_empregado_historico_salario (cod_empregado, salario, data)
    VALUES (NEW.cod_empregado, NEW.salario, now());
      
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_salvar_historico_salario
AFTER UPDATE OF salario ON tbl_empregados
FOR EACH ROW
EXECUTE FUNCTION salvar_historico_salario();


--4 a) crie uma coluna chamada data_atualizacao na tbl_empregados do tipo TIMESTAMP
-- b) crie uma trigger que toda vez que os dados do empregado forem atualizados, que essa data tambem seja atualizada. 


ALTER TABLE tbl_empregados
ADD COLUMN data_atualizacao TIMESTAMP DEFAULT now();

CREATE OR REPLACE FUNCTION atualizar_data_atualizacao() 
RETURNS TRIGGER AS $$
BEGIN
  
    NEW.data_atualizacao = now();
    

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_atualizar_data_atualizacao
BEFORE UPDATE ON tbl_empregados
FOR EACH ROW
EXECUTE FUNCTION atualizar_data_atualizacao();

